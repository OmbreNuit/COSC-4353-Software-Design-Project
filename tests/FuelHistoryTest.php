<?php
require_once __DIR__ . '/../vendor/autoload.php';
require_once __DIR__ . '/../Assignment4/FuelQuoteHistory.php';
require_once __DIR__ . '/../Assignment4/FuelQuoteForm.php';
require_once __DIR__ . '/../Assignment4/clientprofilemanagement.php';
require_once __DIR__ . '/../includes/dbh.inc.php';


class FuelQuoteHistoryTest extends PHPUnit\Framework\TestCase {

        public function testRenderFuelQuoteHistoryPage()
        {
            // Start session
            session_start();
            
            // Set up session user
            $_SESSION['user'] = 'testuser';
            
            // Mock PDO statement
            $stmtMock = $this->getMockBuilder(PDOStatement::class)
                             ->getMock();
            $stmtMock->expects($this->once())
                     ->method('fetch')
                     ->willReturn(['Name' => 'Test Name', 'address' => 'Test Address', 'gallons' => 100, 'deliverydate' => '2024-04-10', 'suggestedprice' => 2.50, 'totalprice' => 250.00]);
    
            // Mock PDO object
            $pdoMock = $this->getMockBuilder(PDO::class)
                            ->disableOriginalConstructor()
                            ->getMock();
            $pdoMock->expects($this->once())
                    ->method('prepare')
                    ->willReturn($stmtMock);
    
            // Inject mock PDO object into the script
            $GLOBALS['pdo'] = $pdoMock;
    
            // Capture output generated by FuelQuoteHistory.php
            ob_start();
            require '../Assignment4/FuelQuoteHistory.php';
            $output = ob_get_clean();
    
            // Assert that the generated output contains expected HTML elements
            $this->assertStringContainsString('<h1>Fuel Quote History</h1>', $output);
            $this->assertStringContainsString('<td>Test Name</td>', $output);
            $this->assertStringContainsString('<td>Test Address</td>', $output);
            $this->assertStringContainsString('<td>100</td>', $output);
            $this->assertStringContainsString('<td>2024-04-10</td>', $output);
            $this->assertStringContainsString('<td>$2.50</td>', $output);
            $this->assertStringContainsString('<td>$250.00</td>', $output);
        }
    
        public function testDatabaseErrorHandling()
        {
            // Start session
            session_start();
            
            // Set up session user
            $_SESSION['user'] = 'testuser';
            
            // Mock PDO object to throw PDOException
            $pdoMock = $this->getMockBuilder(PDO::class)
                            ->disableOriginalConstructor()
                            ->getMock();
            $pdoMock->expects($this->once())
                    ->method('prepare')
                    ->willThrowException(new PDOException("Database error"));
    
            // Inject mock PDO object into the script
            $GLOBALS['pdo'] = $pdoMock;
    
            // Capture output generated by FuelQuoteHistory.php
            ob_start();
            require '../Assignment4/FuelQuoteHistory.php';
            $output = ob_get_clean();
    
            // Assert that the output contains error message
            $this->assertStringContainsString('Error: Database error', $output);
        }
    }